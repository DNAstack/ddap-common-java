package com.dnastack.ddap.common.security;

import org.junit.Test;

import java.util.zip.DataFormatException;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class UserTokenCookiePackagerTest {

    final UserTokenCookiePackager packager = new UserTokenCookiePackager(false, "abcdefghijk", "598953e322");

    @Test
    public void encodeTokenAndDecode() throws PlainTextNotDecryptableException {
        final String clearText = "eyJhbGciOiJSUzI1NiIsImtpZCI6InB1YmxpYzowYzg1ZmNlOC1kZDIyLTQwMzItYWQ3YS1iZmFjYTkxYTBmMTAiLCJ0eXAiOiJKV1QifQ.eyJhdF9oYXNoIjoiQ3JCTUlGcmJHNmt6akhHd1dBQnE1dyIsImF1ZCI6WyI4MTJjMTMxOS1mZWY1LTRhYTYtOTM5My1iZWI1ZWM4ZmFjZGYiXSwiYXV0aF90aW1lIjoxNTc5MTE3NjM3LCJleHAiOjE1NzkxMjEzNjgsImdhNGdoX3Bhc3Nwb3J0X3YxIjpbImV5SnJhV1FpT2lKbE1ERXdOV0ZrWkMwellUZ3hMVE0zWmpRdE9XWTRaUzB6TVdVeVlqSTFNR0UzTldVaUxDSmhiR2NpT2lKU1V6STFOaUo5LmV5SjBiMnRsYmt0cGJtUWlPaUoyYVhOaElpd2ljM1ZpSWpvaU9UQmtNelJrTlRndE56QmlOaTAwWkdVMUxXRTJaREl0TlRka1lUaGpNR0pqTWpVMklpd2lhWE56SWpvaWFIUjBjRG92TDJ4dlkyRnNhRzl6ZERvNE1EZ3hJaXdpYVdGMElqb3hOVGM1TVRFM05qTTJMQ0psZUhBaU9qRTFOemt5TURRd016WXNJbUY2Y0NJNklqSmhZVE5pWXpZMUxURmhOelV0TkdZMlpTMWlOMkpoTFRWa1lUbG1NamcxWVRVMU5pSXNJbWRoTkdkb1gzWnBjMkZmZGpFaU9uc2lkSGx3WlNJNklrTnZiblJ5YjJ4c1pXUkJZMk5sYzNOSGNtRnVkSE1pTENKMllXeDFaU0k2SW1oMGRIQnpPaTh2ZDNkM0xuTm1ZWEpwTG05eVp5OXlaWE52ZFhKalpTOXpjR0Z5YXk4aUxDSnpiM1Z5WTJVaU9pSm9kSFJ3T2k4dmJHOWpZV3hvYjNOME9qZ3dPREVpTENKaWVTSTZJbk52SWl3aVlYTnpaWEowWldRaU9qRTFOemt4TVRjMk16WjlmUS5zN1JYTWQ4LUZ3cG94S3k5ZkdlaV9DY0dFeC15Y2JqMFZSeWZiUENHNFpvSE0wcWJSbk1wcTVXRW0tRnlZWG5FdjJKMlZGaFpWeld0cTl4RlRaV2V1UmZWUlg5QzJEZDdqSWpHOUFpdkZOSkhUb1Q5R1BRRklXNzdPNWllcWFzN2w2VlBmQUZ6STFza2Z3cHdjZUZEalQtNElqMDFBMDlUZjNvQkNQYmNXakRVYzFCclFwYUR4NWlNYVpEODdPak5sbnRoVFh2Y1NQdk0xQ2ZBX0N0QVM0Z24wbTNrelJ3TlBfcWdBSGQ1QzBWV085Z2xONVJneGtHd08ycVhvMVBjREd0WURESnhlTjY1NlpaT29kd2xEX19xdVRoRHRZd20xUU1aQzg2Vm4tSnQ4dTdLVFJVUVg4OXVYd3RpTnhwT2JYYTZuQlVXeUF2RE15N2VqNWxjbEEiLCJleUpyYVdRaU9pSmxNREV3TldGa1pDMHpZVGd4TFRNM1pqUXRPV1k0WlMwek1XVXlZakkxTUdFM05XVWlMQ0poYkdjaU9pSlNVekkxTmlKOS5leUowYjJ0bGJrdHBibVFpT2lKMmFYTmhJaXdpYzNWaUlqb2lPVEJrTXpSa05UZ3ROekJpTmkwMFpHVTFMV0UyWkRJdE5UZGtZVGhqTUdKak1qVTJJaXdpYVhOeklqb2lhSFIwY0RvdkwyeHZZMkZzYUc5emREbzRNRGd4SWl3aWFXRjBJam94TlRjNU1URTNOak0yTENKbGVIQWlPakUxTnpreU1EUXdNellzSW1GNmNDSTZJakpoWVROaVl6WTFMVEZoTnpVdE5HWTJaUzFpTjJKaExUVmtZVGxtTWpnMVlUVTFOaUlzSW1kaE5HZG9YM1pwYzJGZmRqRWlPbnNpZEhsd1pTSTZJa052Ym5SeWIyeHNaV1JCWTJObGMzTkhjbUZ1ZEhNaUxDSjJZV3gxWlNJNkltaDBkSEJ6T2k4dmQzZDNMbk5tWVhKcExtOXlaeTl5WlhOdmRYSmpaUzl6YVcxdmJuTXRjMmx0Y0d4bGVDMWpiMnhzWldOMGFXOXVMeUlzSW5OdmRYSmpaU0k2SW1oMGRIQTZMeTlzYjJOaGJHaHZjM1E2T0RBNE1TSXNJbUo1SWpvaWMyOGlMQ0poYzNObGNuUmxaQ0k2TVRVM09URXhOell6Tm4xOS5UZzQycVhkNFFMNTJDb0VDNWg5UndVRWlOWE5saUU3VEJOdFI1TlhXdEhWT3pvd2l3UWhpbjA3aFlzNWJyX1dxNHR3dFhwS3ZWTmVVVDM3RTU0VnpENWxyWEVxTFA4eE1PcEN2OGU2V2NjcUpxWGhBR2NDVzNxWFdaMC1jcmE5cjRQajFLNnlISXBjYXB6R01uMmFnNXc5V1FQYmJBby05MnptcVhRYjNrS1pURk9jZHlobHZHcEJIR1pkS05uMERjbFFRajB2UnZHNzRrWTlYXzV0bEtteWxWTDY5aXE5eDdaSDBCMnVZNzZkNXdiamNodTV5UHdBQTZ4a040aXZnWnpIc3lJSGFGUUZEUVZEbi1ybERhUldVcXJkVlBselE4VEZ2UWJYRk1FMmtkNTBTcHFQNXdONzQ4aU9Tcl9WYVNlcm1xVEVwZEtkT1BEamx3Q1VLRXciLCJleUpoYkdjaU9pSlNVekkxTmlJc0ltdHBaQ0k2SW10cFpDSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnBZWFFpT2pFMU56a3hNVGMyTXprc0ltbHpjeUk2SW1oMGRIQTZMeTlzYjJOaGJHaHZjM1E2T0RBNE1pOGlMQ0p6ZFdJaU9pSnBZMTlqWVRJNU56azNZVGsxTlRRMFl6VTBZVEkxTldRMk4yUmpNR1FpTENKelkyOXdaU0k2SW05d1pXNXBaQ0lzSW1kaE5HZG9YM1pwYzJGZmRqRWlPbnNpZEhsd1pTSTZJa3hwYm10bFpFbGtaVzUwYVhScFpYTWlMQ0oyWVd4MVpTSTZJamt3WkRNMFpEVTRMVGN3WWpZdE5HUmxOUzFoTm1ReUxUVTNaR0U0WXpCaVl6STFOaXhvZEhSd0pUTkJKVEpHSlRKR2JHOWpZV3hvYjNOMEpUTkJPREE0TVR0dFlYZ2xOREJrYm1GemRHRmpheTVqYjIwc2FIUjBjQ1V6UVNVeVJpVXlSbXh2WTJGc2FHOXpkQ1V6UVRnd09ERWlMQ0p6YjNWeVkyVWlPaUpvZEhSd09pOHZiRzlqWVd4b2IzTjBPamd3T0RJdklpd2lZWE56WlhKMFpXUWlPakUxTnpreE1UYzJNemQ5ZlEublpJTHkyOTRReW9sQ05zTFl1bktsdW5KQzV3bDdDSWpXTWdMU2NmUGtJMVRKRlRRNVc1WWRPeXZyeWFjSVBQRzFHckJ4UnVjMEZTLTRBaWVNNjJmMUgxS3lzRk1RaTNmMjloMk9yLTNoUE4yMzNRa1VzMlpVbHpqd3JuZ0N6Z0I0WVIzbl9lcjYwem96anZSU2k2RkJJZ19GQmJOZncyRFpJREpTLVM5UHhqOWU4c0pTblFTMkRGV0ZNa3ZXbEFCMTB3Zm9XUDE2c25SM2pZOVBkN3pZQWhMUnZVWmVpRjdvdTZveEJfOUJCa0MyalJKdEE5ZlFDajIxdjBiOTBDRnRHZG85a3JkWkdCQi1xSDhkcGlBQ29oSGpXY1hJVmRNbWlDZ2FXbjdVMHNoZjhkRmptLXdSWTJONkc0TnBUSV83aTlGdUtKMk9tTnowcFEtR3BCZFR3Il0sImlhdCI6MTU3OTExNzc2OCwiaWRlbnRpdGllcyI6eyJtYXhAZG5hc3RhY2suY29tIjpbIklDIiwiREFNIl19LCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODIvIiwianRpIjoiMjMwMjA0YjEtOGIzZS00ZGI4LTkxZmUtOTU1ZWE5YzBkMDYxIiwibm9uY2UiOiIiLCJyYXQiOjE1NzkxMTc2MzQsInNpZCI6ImFiMzdhNzA4LTk2NTctNGQwMS1iMzJjLWYyYWFkNjQ2ZTFmYiIsInN1YiI6ImljX2NhMjk3OTdhOTU1NDRjNTRhMjU1ZDY3ZGMwZCJ9.Zu1SqpEaSNL73WNrAW4jRDdzzP3pUsNoJOinZdaPZCZuk9nfXU2Ai8L5Aokf5xmuzKp_xmfM7dYNzc4tKFFOj9XrOw3XDQAicXcsyiQctUSZDRYFkxPPy3NX5jI3eCUhmnVqbLnVgsElGf5jOJ98lonDd1dicpgjawtsWiVXXVe2kJzcmuDBsfeTgvky01Hcybk-jORpBEw06REzL0OdH6pMH1g80CSi0GdfTb86a7oafPFQD799_c8quQ8rlKHdxvW1CQH6N79Hqwdj8FcX0xnRhhXdohza6CtHHsJ7c6-ctRRnQTGGVHpRqf42xb2_zvA168cxDtYc20RnwFlH-xyyQJ2GHBZ3veHV6WyHVUQW7zcPGDzL1yCBnkkktY_LMB-_oDa1vJY8t5PHkvvnx4lHFUXgHq_qdE3ah6ut-ZAnLq23BU-ieyWdRUsD2gEelDljRzlc5bI-7tpbOnghRYFRJQp2xmtnxvO4QiZecL7uRbQMz4yCqHPOHyAVZBLqpW1vAhA996LYmxk_PHt5mHSfzNIGZ9xNZHk5xAycRCVeXyScA09u6X2Ms7WtYdDcmG0xwOGLJ-dZZtNHXoOtIZL4C30b1cmhvqayN_KqbJT8ktK1vD5K7qfunOkaf1yCJTb34_ifY-GUwN18N9H_cgUSdxPFWYyprF_QGqtiEW4";
        final String cipherText = packager.encodeToken(clearText);
        final String decoded = packager.decodeToken(cipherText);

        assertEquals(clearText, decoded);
        System.out.printf("Compressed size: %d\nUncompressed size: %d\n", cipherText.getBytes().length, clearText.getBytes().length);
        assertTrue("Encoded value should be smaller that decoded value", cipherText.getBytes().length < clearText.getBytes().length);
    }

    @Test
    public void compressAndDecompress() throws DataFormatException {
        final String clearText = "eyJhbGciOiJSUzI1NiIsImtpZCI6InB1YmxpYzowYzg1ZmNlOC1kZDIyLTQwMzItYWQ3YS1iZmFjYTkxYTBmMTAiLCJ0eXAiOiJKV1QifQ.eyJhdF9oYXNoIjoiQ3JCTUlGcmJHNmt6akhHd1dBQnE1dyIsImF1ZCI6WyI4MTJjMTMxOS1mZWY1LTRhYTYtOTM5My1iZWI1ZWM4ZmFjZGYiXSwiYXV0aF90aW1lIjoxNTc5MTE3NjM3LCJleHAiOjE1NzkxMjEzNjgsImdhNGdoX3Bhc3Nwb3J0X3YxIjpbImV5SnJhV1FpT2lKbE1ERXdOV0ZrWkMwellUZ3hMVE0zWmpRdE9XWTRaUzB6TVdVeVlqSTFNR0UzTldVaUxDSmhiR2NpT2lKU1V6STFOaUo5LmV5SjBiMnRsYmt0cGJtUWlPaUoyYVhOaElpd2ljM1ZpSWpvaU9UQmtNelJrTlRndE56QmlOaTAwWkdVMUxXRTJaREl0TlRka1lUaGpNR0pqTWpVMklpd2lhWE56SWpvaWFIUjBjRG92TDJ4dlkyRnNhRzl6ZERvNE1EZ3hJaXdpYVdGMElqb3hOVGM1TVRFM05qTTJMQ0psZUhBaU9qRTFOemt5TURRd016WXNJbUY2Y0NJNklqSmhZVE5pWXpZMUxURmhOelV0TkdZMlpTMWlOMkpoTFRWa1lUbG1NamcxWVRVMU5pSXNJbWRoTkdkb1gzWnBjMkZmZGpFaU9uc2lkSGx3WlNJNklrTnZiblJ5YjJ4c1pXUkJZMk5sYzNOSGNtRnVkSE1pTENKMllXeDFaU0k2SW1oMGRIQnpPaTh2ZDNkM0xuTm1ZWEpwTG05eVp5OXlaWE52ZFhKalpTOXpjR0Z5YXk4aUxDSnpiM1Z5WTJVaU9pSm9kSFJ3T2k4dmJHOWpZV3hvYjNOME9qZ3dPREVpTENKaWVTSTZJbk52SWl3aVlYTnpaWEowWldRaU9qRTFOemt4TVRjMk16WjlmUS5zN1JYTWQ4LUZ3cG94S3k5ZkdlaV9DY0dFeC15Y2JqMFZSeWZiUENHNFpvSE0wcWJSbk1wcTVXRW0tRnlZWG5FdjJKMlZGaFpWeld0cTl4RlRaV2V1UmZWUlg5QzJEZDdqSWpHOUFpdkZOSkhUb1Q5R1BRRklXNzdPNWllcWFzN2w2VlBmQUZ6STFza2Z3cHdjZUZEalQtNElqMDFBMDlUZjNvQkNQYmNXakRVYzFCclFwYUR4NWlNYVpEODdPak5sbnRoVFh2Y1NQdk0xQ2ZBX0N0QVM0Z24wbTNrelJ3TlBfcWdBSGQ1QzBWV085Z2xONVJneGtHd08ycVhvMVBjREd0WURESnhlTjY1NlpaT29kd2xEX19xdVRoRHRZd20xUU1aQzg2Vm4tSnQ4dTdLVFJVUVg4OXVYd3RpTnhwT2JYYTZuQlVXeUF2RE15N2VqNWxjbEEiLCJleUpyYVdRaU9pSmxNREV3TldGa1pDMHpZVGd4TFRNM1pqUXRPV1k0WlMwek1XVXlZakkxTUdFM05XVWlMQ0poYkdjaU9pSlNVekkxTmlKOS5leUowYjJ0bGJrdHBibVFpT2lKMmFYTmhJaXdpYzNWaUlqb2lPVEJrTXpSa05UZ3ROekJpTmkwMFpHVTFMV0UyWkRJdE5UZGtZVGhqTUdKak1qVTJJaXdpYVhOeklqb2lhSFIwY0RvdkwyeHZZMkZzYUc5emREbzRNRGd4SWl3aWFXRjBJam94TlRjNU1URTNOak0yTENKbGVIQWlPakUxTnpreU1EUXdNellzSW1GNmNDSTZJakpoWVROaVl6WTFMVEZoTnpVdE5HWTJaUzFpTjJKaExUVmtZVGxtTWpnMVlUVTFOaUlzSW1kaE5HZG9YM1pwYzJGZmRqRWlPbnNpZEhsd1pTSTZJa052Ym5SeWIyeHNaV1JCWTJObGMzTkhjbUZ1ZEhNaUxDSjJZV3gxWlNJNkltaDBkSEJ6T2k4dmQzZDNMbk5tWVhKcExtOXlaeTl5WlhOdmRYSmpaUzl6YVcxdmJuTXRjMmx0Y0d4bGVDMWpiMnhzWldOMGFXOXVMeUlzSW5OdmRYSmpaU0k2SW1oMGRIQTZMeTlzYjJOaGJHaHZjM1E2T0RBNE1TSXNJbUo1SWpvaWMyOGlMQ0poYzNObGNuUmxaQ0k2TVRVM09URXhOell6Tm4xOS5UZzQycVhkNFFMNTJDb0VDNWg5UndVRWlOWE5saUU3VEJOdFI1TlhXdEhWT3pvd2l3UWhpbjA3aFlzNWJyX1dxNHR3dFhwS3ZWTmVVVDM3RTU0VnpENWxyWEVxTFA4eE1PcEN2OGU2V2NjcUpxWGhBR2NDVzNxWFdaMC1jcmE5cjRQajFLNnlISXBjYXB6R01uMmFnNXc5V1FQYmJBby05MnptcVhRYjNrS1pURk9jZHlobHZHcEJIR1pkS05uMERjbFFRajB2UnZHNzRrWTlYXzV0bEtteWxWTDY5aXE5eDdaSDBCMnVZNzZkNXdiamNodTV5UHdBQTZ4a040aXZnWnpIc3lJSGFGUUZEUVZEbi1ybERhUldVcXJkVlBselE4VEZ2UWJYRk1FMmtkNTBTcHFQNXdONzQ4aU9Tcl9WYVNlcm1xVEVwZEtkT1BEamx3Q1VLRXciLCJleUpoYkdjaU9pSlNVekkxTmlJc0ltdHBaQ0k2SW10cFpDSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnBZWFFpT2pFMU56a3hNVGMyTXprc0ltbHpjeUk2SW1oMGRIQTZMeTlzYjJOaGJHaHZjM1E2T0RBNE1pOGlMQ0p6ZFdJaU9pSnBZMTlqWVRJNU56azNZVGsxTlRRMFl6VTBZVEkxTldRMk4yUmpNR1FpTENKelkyOXdaU0k2SW05d1pXNXBaQ0lzSW1kaE5HZG9YM1pwYzJGZmRqRWlPbnNpZEhsd1pTSTZJa3hwYm10bFpFbGtaVzUwYVhScFpYTWlMQ0oyWVd4MVpTSTZJamt3WkRNMFpEVTRMVGN3WWpZdE5HUmxOUzFoTm1ReUxUVTNaR0U0WXpCaVl6STFOaXhvZEhSd0pUTkJKVEpHSlRKR2JHOWpZV3hvYjNOMEpUTkJPREE0TVR0dFlYZ2xOREJrYm1GemRHRmpheTVqYjIwc2FIUjBjQ1V6UVNVeVJpVXlSbXh2WTJGc2FHOXpkQ1V6UVRnd09ERWlMQ0p6YjNWeVkyVWlPaUpvZEhSd09pOHZiRzlqWVd4b2IzTjBPamd3T0RJdklpd2lZWE56WlhKMFpXUWlPakUxTnpreE1UYzJNemQ5ZlEublpJTHkyOTRReW9sQ05zTFl1bktsdW5KQzV3bDdDSWpXTWdMU2NmUGtJMVRKRlRRNVc1WWRPeXZyeWFjSVBQRzFHckJ4UnVjMEZTLTRBaWVNNjJmMUgxS3lzRk1RaTNmMjloMk9yLTNoUE4yMzNRa1VzMlpVbHpqd3JuZ0N6Z0I0WVIzbl9lcjYwem96anZSU2k2RkJJZ19GQmJOZncyRFpJREpTLVM5UHhqOWU4c0pTblFTMkRGV0ZNa3ZXbEFCMTB3Zm9XUDE2c25SM2pZOVBkN3pZQWhMUnZVWmVpRjdvdTZveEJfOUJCa0MyalJKdEE5ZlFDajIxdjBiOTBDRnRHZG85a3JkWkdCQi1xSDhkcGlBQ29oSGpXY1hJVmRNbWlDZ2FXbjdVMHNoZjhkRmptLXdSWTJONkc0TnBUSV83aTlGdUtKMk9tTnowcFEtR3BCZFR3Il0sImlhdCI6MTU3OTExNzc2OCwiaWRlbnRpdGllcyI6eyJtYXhAZG5hc3RhY2suY29tIjpbIklDIiwiREFNIl19LCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODIvIiwianRpIjoiMjMwMjA0YjEtOGIzZS00ZGI4LTkxZmUtOTU1ZWE5YzBkMDYxIiwibm9uY2UiOiIiLCJyYXQiOjE1NzkxMTc2MzQsInNpZCI6ImFiMzdhNzA4LTk2NTctNGQwMS1iMzJjLWYyYWFkNjQ2ZTFmYiIsInN1YiI6ImljX2NhMjk3OTdhOTU1NDRjNTRhMjU1ZDY3ZGMwZCJ9.Zu1SqpEaSNL73WNrAW4jRDdzzP3pUsNoJOinZdaPZCZuk9nfXU2Ai8L5Aokf5xmuzKp_xmfM7dYNzc4tKFFOj9XrOw3XDQAicXcsyiQctUSZDRYFkxPPy3NX5jI3eCUhmnVqbLnVgsElGf5jOJ98lonDd1dicpgjawtsWiVXXVe2kJzcmuDBsfeTgvky01Hcybk-jORpBEw06REzL0OdH6pMH1g80CSi0GdfTb86a7oafPFQD799_c8quQ8rlKHdxvW1CQH6N79Hqwdj8FcX0xnRhhXdohza6CtHHsJ7c6-ctRRnQTGGVHpRqf42xb2_zvA168cxDtYc20RnwFlH-xyyQJ2GHBZ3veHV6WyHVUQW7zcPGDzL1yCBnkkktY_LMB-_oDa1vJY8t5PHkvvnx4lHFUXgHq_qdE3ah6ut-ZAnLq23BU-ieyWdRUsD2gEelDljRzlc5bI-7tpbOnghRYFRJQp2xmtnxvO4QiZecL7uRbQMz4yCqHPOHyAVZBLqpW1vAhA996LYmxk_PHt5mHSfzNIGZ9xNZHk5xAycRCVeXyScA09u6X2Ms7WtYdDcmG0xwOGLJ-dZZtNHXoOtIZL4C30b1cmhvqayN_KqbJT8ktK1vD5K7qfunOkaf1yCJTb34_ifY-GUwN18N9H_cgUSdxPFWYyprF_QGqtiEW4";
        final byte[] compressed = packager.compressToken(clearText);
        final String decompressed = packager.decompressToken(compressed);

        assertEquals(clearText, decompressed);
        System.out.printf("Compressed size: %d\nUncompressed size: %d\n", compressed.length, clearText.getBytes().length);
        assertTrue("Encoded value should be smaller that decoded value", compressed.length < clearText.getBytes().length);
    }

}